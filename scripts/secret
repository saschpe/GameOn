#!/bin/bash
#
# Script to encrypt / decrypt secrets.
#

SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
. "${SCRIPT_DIR}/inc.functions.sh"

# Constants
FIREBASE_SECRET_FILES=(
  config/firebase-test-lab-ci.json
)
SIGNING_SECRET_FILES=(
  buildSrc/src/main/kotlin/Secrets.kt
  config/play-publishing-api.json
)
ALL_SECRET_FILES=("${FIREBASE_SECRET_FILES[@]}" "${SIGNING_SECRET_FILES[@]}")

# Functions
function usage() {
  echo -e "Usage: ${0} [COMMAND]"
  echo -e "Options:"
  echo -e "  --password PASSWORD"
  echo -e "Commands:"
  echo -e "  decrypt"
  echo -e "  encrypt"
  exit 1
}

# Command-line arguments
password=
command=
files=("${ALL_SECRET_FILES[@]}")
while [[ $# -gt 0 ]]; do
  key="$1"
  case ${key} in
  decrypt)
    command=decrypt
    ;;
  encrypt)
    command=encrypt
    ;;
  -f | --firebase)
    files=("${FIREBASE_SECRET_FILES[@]}")
    ;;
  -p | --password)
    password="--passphrase $2"
    shift # past argument
    ;;
  -s | --signing)
    files=("${SIGNING_SECRET_FILES[@]}")
    ;;
  -h | --help)
    usage
    ;;
  *)
    warn "Unknown option: ${key}"
    usage
    ;;
  esac
  shift # past argument or value
done

# Checks
[[ -n "${command}" ]] || usage

# Let's roll
case ${command} in
decrypt)
  for file in "${files[@]}"; do
    approve "Decrypting ${file}.enc"
    safe gpg --batch --yes "${password}" --output "${file}" --decrypt "${file}.gpg"
    if [[ "$(file -b "${file}")" == "data" ]]; then
      rm -f "${file}"
      die "Failed to decrypt ${file}"
    fi
  done
  ;;
encrypt)
  for file in "${files[@]}"; do
    approve "Encrypting ${file}"
    safe gpg --batch --yes "${password}" --output "${file}.gpg" --symmetric "${file}"
  done
  ;;
esac
